// Name: Ngu Dang (Nathan)

/*
   NOTES ON USING THIS FILE:
      (1) Store in a convenient directory.
      (2) At the command line, type "javacc Parser.jj"
      (3) At the command line, type "javac Parser.java"
      (4) To run, type "java Parser <inputfilename>".
   It's easy to leave out step 3! The file Parser.java is
   automatically generated by javacc, but is NOT automatically
   compiled by it!
   Note: The "name" of the file Parser.java comes from the name of
   the "class" Parser in this file. Even if you change the name
   of this file, unless you change the name of the Parser class below,
   javacc will still generate a file entitled Parser.java.
 */

 /*
    What this file does: after receiving this file, javacc will produce a .java file (Parser.java)
    which not only prints tokens but also prints out each successful reduction. The grammatical symbols
    are nicely indented so that the structure of the parse tree is evident in the output 
 */

PARSER_BEGIN(Parser)

import java.io.*;
import java.util.*;

public class Parser {
   public static void main(String[] args) throws ParseException, FileNotFoundException {
      Parser parser = new Parser(new FileInputStream(args[0]));
      parser.Input();
   }

   public static void indent(int n) {
      for (int i = 0; i < n; ++i) {
         System.out.print(" ");
         System.out.print(" ");
      }
   }
}

abstract class AST {}
class Leaf extends AST {
    String value;
    Leaf(String val) {
        this.value = val;
    }
}
class Node extends AST {
    String value;
    AST left, right;
    Node(String val, AST l, AST r) {
        this.value = val; 
        this.left = l; 
        this.right = r;
    }
}

PARSER_END(Parser)

// skip blanks & spaces
 SKIP: 
 {
   " "
   | "\t"
   | "\n"
   | "\r"
 }

// tokens inside the current grammars
 TOKEN:
 {
    <KEYWORD: "void" | "main" | "if" | "else" | "while">
    | <TYPE: "int" | "bool">
    | <RELOP: "==" | "!=" | "<" | "<=" | ">" | ">=">
    | <ADDOP: "+" | "-" | "||">
    | <SIGN: "+" | "-">
    | <MULTOP: "*" | "/" | "%" | "&&">
    | <ASSIGNOP: "=">
    | <SEMICOLON: ";">
    | <OPENPAREN: "(">
    | <CLOSEPAREN: ")">
    | <BEGIN: "{">
    | <END: "}">
    | <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
    | <LETTER: ["a"-"z"] | ["A" - "Z"]>
    | <DIGIT: ["0"-"9"]>
    | <COMMA: ",">
    | <NOT: "!">
 }

void Input():
{ }
{
   { 
      System.out.println("Parsing the input file..."); 
      System.out.println("-------------------------");
   }
   program() <EOF>
}
/* 
BEGIN: Specification of language
  - Recursive decent is applied.  
  - Printing actions are embedded so that token and parse info is printed as it goes.
  - Each rule of the grammar is attached as a comment line before each corresponding function for easy reading.
  - Each function, starting from block(), will have an integer argument, say 'n', which indicates the "level/"depth" of that rule
  in the grammar, that is, n will increase by 1 when it goes one level deeper. This will help give the correct indentation for the output since the indent(int n) method will produce the spaces based on 'n'.
*/

// <program> → void main () <block>
AST program() :
{ 
    AST tree;
}
{
    <KEYWORD> <KEYWORD> <OPENPAREN> <CLOSEPAREN> 
    tree = block()
    { return tree; }
} 

// <block> → { <declarations> <optional_statements>? }
AST block() :
{ 
    AST tree;   
}
{
    <BEGIN> tree = declarations() optional_statements() <END>
    { return tree; }
}

// <declarations>  →  (<declaration>)*
AST declarations() :
{
    AST tree = null, op;
}
{
    (tree = declaration())*
    { return tree; }
}

// <declaration>  →  <type> <identifier_list>; 
AST declaration() :
{
    Token t;
    AST tree;
}
{
    <TYPE> tree = identifier_list() <SEMICOLON>
    { return tree; }
}

// <identifier_list>  →  <id>  ( , <id> )*
AST identifier_list(): 
{
    Token t;
    AST tree, op;
}
{
    <IDENTIFIER> (<COMMA> <IDENTIFIER>)*
    { return null; }
}

// <optional_statements>  → <statement_list>
AST optional_statements() :
{ 
    AST tree;
}
{
   tree = statement_list()
   { return tree; }
}

// <statement_list>  → <statement> ( <statement> )* 
AST statement_list() :
{
   AST tree;
}
{
    tree = statement() (statement())*
    { return tree; }
}

/* <statement>  → <variable> <assignop> <expression>;
                | <block>
                | if (<expression>) <statement> <else_clause>
                | while (<expression>) <statement> */
AST statement() :
{
   Token t;
   AST tree;
}
{
   tree = variable() <ASSIGNOP> expression() <SEMICOLON>
   { return tree; }
   |
   tree = block()
   { return tree; }
   |
   LOOKAHEAD(3)
   <KEYWORD> <OPENPAREN> tree = expression() <CLOSEPAREN> statement() else_clause()
   { return tree; }
   |
   <KEYWORD> <OPENPAREN> tree = expression() <CLOSEPAREN> statement()
   { return tree; }
}

// <else_clause>  →  ( else <statement> )? 
AST else_clause() :
{
    Token t;
    AST tree = null;
}
{
  (LOOKAHEAD(2)
  <KEYWORD> tree = statement())?
  { return tree; }
}

// <variable> → <id> 
AST variable() : 
{ 
    Token t;
    AST tree;
}
{
   <IDENTIFIER>
   { return null; }
}

// <expression> -> <simple_expression> <relopclause>
AST expression() :
{
    AST tree;
}
{
    tree = simple_expression() relopclause()
    { return tree; }
}

// <relopclause> -> <relop> <simple_expression> | ε  
AST relopclause() :
{
    Token t;
    AST tree = null;
}
{
   [<RELOP> tree = simple_expression()]
   { return tree; }
}


/* <simple_expression>  → <term> ( <addop> <term> ) * 
                        | <sign> <term> */
AST simple_expression() :
{ 
    Token t;
    AST tree, op, r;
}
{
    tree = term() (t = <ADDOP> r = term() {
        op = new Node(t.image, tree, r);
        tree = op;
    })*
    { return tree; }
    |
    <SIGN> tree = term()
    { return tree; }
}

// <term> →   <factor> (<mulop> <factor>) * 
AST term() :
{
    Token t;
    AST tree, op, r;
}
{
    tree = factor() (t = <MULTOP> r = factor() {
        op = new Node(t.image, tree, r);
        tree = op;
    })*
    { return tree; }
}

// <factor>  → <id> |  (<expression>) |  <num> | !<factor>
AST factor() :
{
    Token t;
    AST tree;
}
{
    t = <IDENTIFIER>
    { return new Leaf(t.image); }
    | 
    <OPENPAREN> tree = expression() <CLOSEPAREN>
    { return tree; }
    | 
    t = <DIGIT> { return new Leaf(t.image); }
    |
    <NOT> tree = factor()
    { return tree; }
}

/* END: Specification of language */