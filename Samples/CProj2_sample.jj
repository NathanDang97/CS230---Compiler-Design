// Name: Ngu Dang (Nathan)

/*
   NOTES ON USING THIS FILE:
      (1) Store in a convenient directory.
      (2) At the command line, type "javacc Lexer.jj"
      (3) At the command line, type "javac Lexer.java"
      (4) To run, type "java Lexer <inputfilename>".
   It's easy to leave out step 3! The file Lexer.java is
   automatically generated by javacc, but is *not* automatically
   compiled by it!
   NB: The *name* of the file Lexer.java comes from the name of
   the *class* Lexer in this file. Even if you change the name
   of this file, unless you change the name of the Lexer class below,
   javacc will still generate a file entitled Lexer.java.
 */

PARSER_BEGIN(Lexer)

import java.io.*;
import java.util.*;

public class Lexer {

   public static void main(String[] args) throws ParseException, FileNotFoundException {
      Lexer parser = new Lexer(new FileInputStream(args[0]));
      parser.Input();
   }

   public static void printToken(Token t, String type) {
      if (type.equals("<KEYWORD>"))
        System.out.println("\t" + type + "\t\t" + t.image);
      else if (type.equals("<BEGIN>"))
        System.out.println("\t" + type + "\t\t\t" + t.image);
      else if (type.equals("<END>"))
        System.out.println("\t" + type + "\t\t\t" + t.image);
      else if (type.equals("<ADDOP>"))
        System.out.println("\t" + type + "\t\t\t" + t.image);
      else if (type.equals("<MULTOP>"))
        System.out.println("\t" + type + "\t\t" + t.image);
      else if (type.equals("<ASSIGNOP>"))
        System.out.println("\t" + type + "\t\t" + t.image);
      else if (type.equals("<SEMICOLON>"))
        System.out.println("\t" + type + "\t\t" + t.image);
      else if (type.equals("<OPENPAREN>"))
        System.out.println("\t" + type + "\t\t" + t.image);
      else if (type.equals("<CLOSEPAREN>"))
        System.out.println("\t" + type + "\t\t" + t.image);
      else if (type.equals("<IDENTIFIER>"))
        System.out.println("\t" + type + "\t\t" + t.image);
   }

   public static void indent(int n) {
      for (int i = 0; i < n; ++i) {
         System.out.print(" ");
         System.out.print(" ");
      }
   }
}

PARSER_END(Lexer)

 /* BEGIN: Specification of tokens */

 SKIP: 
 {
   " "
   | "\t"
   | "\n"
   | "\r"
 }

 TOKEN:
 {
    <KEYWORD: "void" | "main">
    | <ADDOP: "+" | "-" >
    | <MULTOP: "*" | "/" | "%">
    | <ASSIGNOP: "=">
    | <SEMICOLON: ";">
    | <OPENPAREN: "(">
    | <CLOSEPAREN: ")">
    | <BEGIN: "{">
    | <END: "}">
    | <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
    | <LETTER: ["a"-"z"]>
    | <DIGIT: ["0"-"9"]>
 }

/* END: Specification of tokens */

/* BEGIN: Specification of Language */

void Input():
{ }
{
   // { System.out.println("\t" + "Type\t\t\t" + "Lexeme"); }
   program() <EOF>
}

// grammar: <program> --> (<token expression>)*
void Program() :
{ Token t; }
{
    (
     t = <BEGIN>      { printToken(t, "<BEGIN>"); }
     |
     t = <END>        { printToken(t, "<END>"); }
     |
     t = <KEYWORD>    { printToken(t, "<KEYWORD>"); }
     |
     t = <MULTOP>     { printToken(t, "<MULTOP>"); }
     |
     t = <ADDOP>      { printToken(t, "<ADDOP>"); }
     |
     t = <ASSIGNOP>   { printToken(t, "<ASSIGNOP>"); }
     |
     t = <SEMICOLON>  { printToken(t, "<SEMICOLON>"); }
     |
     t = <OPENPAREN>  { printToken(t, "<OPENPAREN>"); }
     |
     t = <CLOSEPAREN> { printToken(t, "<CLOSEPAREN>"); }
     |
     t = <IDENTIFIER> { printToken(t, "<IDENTIFIER>"); }
    )*
}

// <program> → void main () <block>
void program() :
{ 
   Token t;
   int lv = 1;
   indent(lv);
   System.out.println("<program>");
}
{
   t = <KEYWORD> { 
      indent(lv);
      System.out.println(t.image); 
   } 
   t = <KEYWORD> {
      indent(lv); 
      System.out.println(t.image); 
   } 
   t = <OPENPAREN> {
      indent(lv);     
      System.out.print(t.image);   
   }
   t = <CLOSEPAREN> { 
      System.out.println(t.image); 
   }
   block(lv)
} 

// <block> → { <optional_statements>? }
void block(int n) :
{ 
   Token t;
   int lv = n; // level = 2
   indent(lv);
   System.out.println("<block>");
}
{
   t = <BEGIN> {
      indent(lv);
      System.out.println(t.image);
   } 
   (optional_statements(lv + 1))? 
   t = <END> {
      indent(lv);
      System.out.println(t.image);
   }
}

// <optional_statements>  → <statement_list>
void optional_statements(int n) :
{ 
   int lv = n; // level = 3
   indent(lv);
   System.out.println("<optional_statements>");
}
{
   statement_list(lv + 1)
}

// <statement_list>  → <statement> ( <statement> )* 
void statement_list(int n) :
{
   int lv = n; // level = 4
   indent(lv);
   System.out.println("<statement_list>"); 
}
{
   statement(lv + 1) (statement(lv + 1))*
}

// <statement>  → <variable> <assignop> <expression>;
void statement(int n) :
{
   Token t;
   int lv = n; // level = 5
   indent(lv);
   System.out.println("<statement>"); 
}
{
   variable(lv + 1) 
   t = <ASSIGNOP> {
      indent(lv + 1);
      System.out.println(t.image);
   } 
   expression(lv + 1) 
   t = <SEMICOLON> {
      indent(lv);
      System.out.println(t.image);
   }
}

// <variable> → <id> 
void variable(int n) : 
{ 
   Token t;
   int lv = n; // level = 5
   indent(lv);
   System.out.println("<variable>");
}
{
   t = <IDENTIFIER> {
      indent(lv + 1);
      System.out.println(t.image);
   }
}

// <expression> → <simple_expression> 
void expression(int n) :
{
   int lv = n; // level = 6
   indent(lv);
   System.out.println("<expression>"); 
}
{
   simple_expression(lv + 1)
}

// <simple_expression>  → <term> ( <addop> <term> ) * 
void simple_expression(int n) :
{ 
   Token t;
   int lv = n; // level = 7
   indent(lv);
   System.out.println("<simple_expression>");
}
{
   term(lv + 1)
   (t = <ADDOP> {
       indent(lv + 1);
       System.out.println(t.image);
    } 
    term(lv + 1)
   )*
}

// <term> →   <factor> (<mulop> <factor>) * 
void term(int n) :
{
   Token t;
   int lv = n; // level = 8
   indent(lv);
   System.out.println("<term>"); 
}
{
   factor(lv + 1) 
   (t = <MULTOP> {
       indent(lv + 1);
       System.out.println(t.image);
    } 
    factor(lv + 1)
   )*
}

// <factor>  → <id> |  (<expression>) |  <num>
void factor(int n) :
{
   Token t;
   int lv = n; // level = 9
   indent(lv);
   System.out.println("<factor>");
}
{
   t = <IDENTIFIER> {
      indent(lv + 1);
      System.out.println(t.image);
   } 
   | 
   t = <OPENPAREN> {
      indent(lv + 1);
      System.out.println(t.image);
   }
   expression(lv + 1) 
   t = <CLOSEPAREN> {
      indent(lv + 1);
      System.out.println(t.image);
   }
   | 
   t = <DIGIT> {
      indent(lv + 1);
      System.out.println(t.image);
   }
}

/* END: Specification of Language */
