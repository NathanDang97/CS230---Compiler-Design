/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.io.*;
import java.util.*;

public class Parser implements ParserConstants {
   StringBuilder sb = new StringBuilder();

   public static void main(String[] args) throws ParseException, FileNotFoundException {
      Parser parser = new Parser(new FileInputStream(args[0]));
      parser.Input();
   }

   public static void indent(int n) {
      for (int i = 0; i < n; ++i) {
         System.out.print(" ");
         System.out.print(" ");
      }
   }

/* END: Specification of tokens */

/* BEGIN: Specification of Language */
  static final public void Input() throws ParseException {
      System.out.println("Parsing the input file...");
      System.out.println("-------------------------");
    program();
    jj_consume_token(0);
  }

// <program> → void main () <block>
  static final public void program() throws ParseException {
   Token t;
   int lv = 1;
   indent(lv);
   System.out.println("<program>");
    t = jj_consume_token(KEYWORD);
      indent(lv);
      System.out.println(t.image);
    t = jj_consume_token(KEYWORD);
      indent(lv);
      System.out.println(t.image);
    t = jj_consume_token(OPENPAREN);
      indent(lv);
      System.out.print(t.image);
    t = jj_consume_token(CLOSEPAREN);
      System.out.println(t.image);
    block(lv);
  }

// <block> → { <optional_statements>? }
  static final public void block(int n) throws ParseException {
   Token t;
   int lv = n; // level = 2
   indent(lv);
   System.out.println("<block>");
    t = jj_consume_token(BEGIN);
      indent(lv);
      System.out.println(t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      optional_statements(lv + 1);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    t = jj_consume_token(END);
      indent(lv);
      System.out.println(t.image);
  }

// <optional_statements>  → <statement_list>
  static final public void optional_statements(int n) throws ParseException {
   int lv = n; // level = 3
   indent(lv);
   System.out.println("<optional_statements>");
    statement_list(lv + 1);
  }

// <statement_list>  → <statement> ( <statement> )* 
  static final public void statement_list(int n) throws ParseException {
   int lv = n; // level = 4
   indent(lv);
   System.out.println("<statement_list>");
    statement(lv + 1);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      statement(lv + 1);
    }
  }

// <statement>  → <variable> <assignop> <expression>;
  static final public void statement(int n) throws ParseException {
   Token t;
   int lv = n; // level = 5
   indent(lv);
   System.out.println("<statement>");
    variable(lv + 1);
    t = jj_consume_token(ASSIGNOP);
      indent(lv + 1);
      System.out.println(t.image);
    expression(lv + 1);
    t = jj_consume_token(SEMICOLON);
      indent(lv);
      System.out.println(t.image);
  }

// <variable> → <id> 
  static final public void variable(int n) throws ParseException {
   Token t;
   int lv = n; // level = 5
   indent(lv);
   System.out.println("<variable>");
    t = jj_consume_token(IDENTIFIER);
      indent(lv + 1);
      System.out.println(t.image);
  }

// <expression> → <simple_expression> 
  static final public void expression(int n) throws ParseException {
   int lv = n; // level = 6
   indent(lv);
   System.out.println("<expression>");
    simple_expression(lv + 1);
  }

// <simple_expression>  → <term> ( <addop> <term> ) * 
  static final public void simple_expression(int n) throws ParseException {
   Token t;
   int lv = n; // level = 7
   indent(lv);
   System.out.println("<simple_expression>");
    term(lv + 1);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDOP:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      t = jj_consume_token(ADDOP);
       indent(lv + 1);
       System.out.println(t.image);
      term(lv + 1);
    }
  }

// <term> →   <factor> (<mulop> <factor>) * 
  static final public void term(int n) throws ParseException {
   Token t;
   int lv = n; // level = 8
   indent(lv);
   System.out.println("<term>");
    factor(lv + 1);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTOP:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      t = jj_consume_token(MULTOP);
       indent(lv + 1);
       System.out.println(t.image);
      factor(lv + 1);
    }
  }

// <factor>  → <id> |  (<expression>) |  <num>
  static final public void factor(int n) throws ParseException {
   Token t;
   int lv = n; // level = 9
   indent(lv);
   System.out.println("<factor>");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      indent(lv + 1);
      System.out.println(t.image);
      break;
    case OPENPAREN:
      t = jj_consume_token(OPENPAREN);
      indent(lv + 1);
      System.out.println(t.image);
      expression(lv + 1);
      t = jj_consume_token(CLOSEPAREN);
      indent(lv + 1);
      System.out.println(t.image);
      break;
    case DIGIT:
      t = jj_consume_token(DIGIT);
      indent(lv + 1);
      System.out.println(t.image);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x4000,0x40,0x80,0x14400,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[17];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
